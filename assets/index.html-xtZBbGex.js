import{_ as e,o as a,c as o,a as t}from"./app-hY-fDAl5.js";const i={},l=t('<h1 id="cleardebit-bureau" tabindex="-1"><a class="header-anchor" href="#cleardebit-bureau"><span>ClearDebit Bureau</span></a></h1><h2 id="flow-of-processing" tabindex="-1"><a class="header-anchor" href="#flow-of-processing"><span>Flow of Processing</span></a></h2><h3 id="uploading-files" tabindex="-1"><a class="header-anchor" href="#uploading-files"><span>Uploading Files</span></a></h3><p>The uploading of BACS files for submission is the simplest side of the flow. Simply a file needs to be uploaded either to the <code>/uploads/</code> directory of the SFTP server, or the file contents base64 encoded, and sent via the API utilising the <code>upload</code> action.</p><p>You should check that the file has been uploaded successfully either by polling the directory on the SFTP server once the upload has completed; or by handling the response to the API request which will confirm the successful uploading of the file.</p><h3 id="downloading-reports" tabindex="-1"><a class="header-anchor" href="#downloading-reports"><span>Downloading Reports</span></a></h3><p>Various BACS reports will be uploaded for retrieval by the integrator. These can either be retrieved using the SFTP or API integration method.</p><p>For SFTP integrators, simply polling the <code>/reports/</code> directory on a regular basis will detail any reports which have been made available for download.</p><p>For API integrators, there are a couple of possible options to integrate.</p><p>Either a call can be made to the API with the <code>download</code> action. This will retrieve, supply &amp; then automatically archive all available reports.</p><p>Alternatively the integrator can iterate through all available reports by calling:</p><ol><li><code>countReports</code> which will confirm if any available reports are available.</li><li>If there are more than zero reports available, <code>listReports</code> will retrieve a list of all available reports.</li><li><code>downloadByName</code> can then be called for each individual report, downloading &amp; then archiving these reports.</li></ol><h2 id="sftp-or-api" tabindex="-1"><a class="header-anchor" href="#sftp-or-api"><span>SFTP or API</span></a></h2><p>The integration with ClearDebit can be completed using <em>either</em> SFTP or the API (both are documented here), both operate with the same feature-set as each other.</p>',14),r=[l];function n(s,d){return a(),o("div",null,r)}const c=e(i,[["render",n],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/cdd-bureau/","title":"ClearDebit Bureau","lang":"en-GB","frontmatter":{"title":"ClearDebit Bureau"},"headers":[{"level":2,"title":"Flow of Processing","slug":"flow-of-processing","link":"#flow-of-processing","children":[{"level":3,"title":"Uploading Files","slug":"uploading-files","link":"#uploading-files","children":[]},{"level":3,"title":"Downloading Reports","slug":"downloading-reports","link":"#downloading-reports","children":[]}]},{"level":2,"title":"SFTP or API","slug":"sftp-or-api","link":"#sftp-or-api","children":[]}],"git":{"updatedTime":1710325421000,"contributors":[{"name":"Matt Clements","email":"matt@mattclements.co.uk","commits":2}]},"filePathRelative":"cdd-bureau/README.md"}');export{c as comp,p as data};
